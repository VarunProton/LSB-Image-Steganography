***LSB Image Steganography Project:

This project demonstrates a steganography technique using LSB (Least Significant Bit) embedding to hide a secret file within an image file. The project supports .bmp images (and .png as an alternative). This README provides an overview of the encoding and decoding processes and the file structure used in this implementation.

**Project Overview:
The project utilizes LSB image steganography to conceal a secret file within an image. The encoding process involves hiding the file metadata (e.g., file type and size) along with the actual content of the file. The decoding process then reads this embedded data back from the image.

**Encoding Process:
*Image Header:
The .bmp file format has a 54-byte header, which is copied unchanged to the output image (output.bmp).
The dimensions of the image are stored at specific positions in the header:
Width is found at the 18th byte.
Height is found at the 22nd byte.

*Magic String:
To verify the presence of hidden data, a "magic string" is embedded in the image LSBs. This string occupies the next 16 bits (2 bytes) after the header.
    
*File Extension:
The size of the secret fileâ€™s extension (e.g., .txt, .pdf) is stored as an integer in the next 32 bits.
The extension itself is then embedded, bit-by-bit, after this.

*File Size:
The size of the secret file, as an integer, is embedded in the next 32 bits.

*Secret File Content:
The actual content of the secret file is then embedded, bit-by-bit, after the metadata.

*Remaining Image Data:
Any data in the image file beyond the embedded information is copied as-is to the output image.

**Decoding Process:   To retrieve the hidden file, follow these steps:

*Skip Header:
The first 54 bytes (header) of the .bmp image are skipped.

*Extract Magic String:
The magic string ("#*") is read from the next 16 bits and compared to the original.
If it matches, the presence of a hidden file is confirmed.

*Retrieve File Metadata:
*Extension Size: The size of the file extension is decoded from the next 32 bits.
*File Extension: The extension itself is then read, bit-by-bit.
*File Size: The size of the secret file is decoded from the next 32 bits.

*Extract Secret File Content:
The actual content of the secret file is then read, bit-by-bit, using the decoded file size.

**Output:
The extracted content is saved with the decoded file extension.

**Example Use Case
This project can be used to hide text or any small file in an image for secure and discreet transfer.

**Technical Requirements
Programming Language: C (or C++ as required for bitwise operations)
Supported Image Formats: .bmp (primary), .png (optional support)
